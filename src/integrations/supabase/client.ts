
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://zaitoudikrddbzsfukzv.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InphaXRvdWRpa3JkZGJ6c2Z1a3p2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA4MzAxMzEsImV4cCI6MjA1NjQwNjEzMX0.QfTPLs8GumhnZRHKCmkxGV7a5vA1Nhg_5RiBhsW7FkQ";

// Créer un client singleton pour assurer la cohérence dans toute l'application
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storage: localStorage
  },
  global: {
    headers: {
      'x-application-name': 'video-portfolio-app'
    }
  },
  db: {
    schema: 'public'
  }
});

// Ajout d'une fonction helper pour nettoyer l'état d'authentification
export const cleanupAuthState = () => {
  console.log('Nettoyage de l'état d'authentification');
  // Supprimer tous les jetons d'authentification standard
  localStorage.removeItem('supabase.auth.token');
  
  // Supprimer toutes les clés d'authentification Supabase de localStorage
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
      console.log('Suppression de la clé:', key);
      localStorage.removeItem(key);
    }
  });
  
  // Supprimer de sessionStorage si utilisé
  if (typeof sessionStorage !== 'undefined') {
    Object.keys(sessionStorage).forEach((key) => {
      if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
        console.log('Suppression de la clé de session:', key);
        sessionStorage.removeItem(key);
      }
    });
  }
};
